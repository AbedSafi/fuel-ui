{"version":3,"sources":["components/InfiniteScroller/InfiniteScroller.Demo.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAwB,eAAe,CAAC,CAAA;AACxC,iCAA0C,oBAAoB,CAAC,CAAA;AAC/D,gCAA8B,kDAAkD,CAAC,CAAA;AACjF,8BAAuE,8CAA8C,CAAC,CAAA;AACtH,8BAAyG,+BAA+B,CAAC,CAAA;AACzI,oBAA4B,0BAA0B,CAAC,CAAA;AA2HvD;IAKI;QAJA,wBAAmB,GAAa,EAAE,CAAC;QACnC,sBAAiB,GAAW,CAAC,CAAC;QAC9B,sBAAiB,GAAW,CAAC,CAAC;QA4B9B,eAAU,GAAe;YACrB,IAAI,yBAAS,CAAC,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,2DAA2D,CAAC;YACtG,IAAI,yBAAS,CAAC,UAAU,EAAE,QAAQ,EAAE,KAAK,EAAE,+DAA+D,CAAC;YAC3G,IAAI,yBAAS,CAAC,eAAe,EAAE,SAAS,EAAE,OAAO,EAAE,4CAA4C,CAAC;SACnG,CAAC;QACF,sBAAiB,GAAyB,gCAAgB,CAAC;QAC3D,mBAAc,GAAwB,qCAAqB,CAAC;QAC5D,WAAM,GAAW;YACb,IAAI,qBAAK,CAAC,MAAM,EAAE,MAAM,EAAE,kDAAkD,CAAC;YAC7E,IAAI,qBAAK,CAAC,MAAM,EAAE,MAAM,EAAE,gDAAgD,CAAC;SAC9E,CAAC;QACF,kBAAa,GAAyB,4BAAY,CAAC;QACnD,eAAU,GAAwB,iCAAiB,CAAC;QArChD,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;YAC1B,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;QAClC,CAAC;IACL,CAAC;IAED,iDAAkB,GAAlB;QACI,IAAI,OAAO,GAAG,EAAE,CAAC;QACjB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;YAC1B,OAAO,IAAI,OAAO,GAAG,IAAI,CAAC,iBAAiB,GAAG,GAAG,CAAC;QACtD,CAAC;QAED,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACzB,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IAC9C,CAAC;IAED,gDAAiB,GAAjB,UAAkB,KAAqB;QAArB,qBAAqB,GAArB,YAAqB;QACnC,IAAI,OAAO,GAAG,EAAE,CAAC;QACjB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;YAC1B,OAAO,IAAI,OAAO,GAAG,IAAI,CAAC,iBAAiB,GAAG,GAAG,CAAC;QACtD,CAAC;QAED,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACzB,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC3C,CAAC;IAtJL;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,29GAqHL;YACC,UAAU,EAAE,CAAC,8CAA2B,EAAE,iCAAe,EAAE,6BAAa,EAAE,mBAAa,CAAC;SAC/F,CAAC;;4BAAA;IA6CF,2BAAC;AAAD,CA5CA,AA4CC,IAAA;AA5CY,4BAAoB,uBA4ChC,CAAA;AAEU,uCAA+B,GAAG;IACzC,oBAAoB;CACvB,CAAC","file":"components/InfiniteScroller/InfiniteScroller.Demo.js","sourcesContent":["import {Component} from 'angular2/core';\nimport {INFINITE_SCROLLER_PROVIDERS} from './InfiniteScroller';\nimport {CodeHighlighter} from '../../directives/CodeHighlighter/CodeHighlighter';\nimport {TableSortable, TableSortableColumn, TableSortableSorting} from '../../components/TableSortable/TableSortable';\nimport {Event, EventColumns, EventsDefaultSort, Attribute, AttributeColumns, AttributesDefaultSort} from '../../utilities/demoUtilities';\nimport {TAB_PROVIDERS} from '../../components/Tab/Tab';\n\n@Component({\n  template: `\n<div class=\"row\">\n    <div class=\"col-md-12\">\n        <div class=\"card card-block\">\n            <h2 class=\"card-title\">Infinite Scroller</h2>\n            <p class=\"card-text\">Infinite Scroller is a custom component to infinitely scroll</p>\n        </div>\n    </div>\n</div>\n\n<section class=\"row m-a\">\n    <div class=\"col-md-6\" style=\"border: 1px solid #333; background-color: #EEE\">\n        <infinite-scroller \n            (next)=\"infinteScrollNext()\" \n            (prev)=\"infiniteScrollPrev()\" \n            height=\"300px\"\n            distance=\"120\"\n            hideScrollbar=\"true\">\n            <div *ngFor=\"#item of infiniteScrollItems\" \n                class=\"card p-a scroll-item\" style=\"background-color: #FFF\">\n                <div class=\"card-block\">\n                    <h4 class=\"card-title\">Some Item</h4>\n                    <p class=\"card-text\">{{item}}</p>\n                </div>\n            </div>\n        </infinite-scroller>\n    </div>\n</section>\n\n<div class=\"source\">\n<h3>Import</h3>\n<pre>\n<code class=\"language-javascript\" code-highlight>\nimport {INFINITE_SCROLLER_PROVIDERS} from 'fuel-ui/fuel-ui';\n</code>\n</pre>\n\n<h3>Getting Started</h3>\n<p>The Infinite Scroller component allows for asynchronous ability to show items as a user scrolls. Use the <code>next</code> and <code>prev</code> events to know when to start adding items to show or removing items for performance reasons.</p>\n\n<h3>Usage</h3>\n<tabset>\n<tab heading=\"HTML\">\n<pre>\n<code class=\"language-markup\" code-highlight>\n&lt;infinite-scroller \n    (next)=&quot;infinteScrollNext()&quot; \n    (prev)=&quot;infiniteScrollPrev()&quot; \n    height=&quot;300px&quot;\n    distance=&quot;120&quot;\n    hideScrollbar=&quot;true&quot;&gt;\n    &lt;div *ngFor=&quot;#item of infiniteScrollItems&quot; \n        class=&quot;card p-a scroll-item&quot;&gt;\n        &lt;div class=&quot;card-block&quot;&gt;\n            &lt;h4 class=&quot;card-title&quot;&gt;Some Item&lt;/h4&gt;\n            &lt;p class=&quot;card-text&quot;&gt;<pre>{</pre>{item}}&lt;/p&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n&lt;/infinite-scroller&gt;\n</code>\n</pre>\n</tab>\n<tab heading=\"TypeScript\">\n<pre>\n<code class=\"language-javascript\" code-highlight>\nexport class InfiniteScrollerDemo {\n    infiniteScrollItems: string[] = [];\n    infiniteScrollMin: number = 0;\n    infiniteScrollMax: number = 1;\n\n    constructor() {\n        for (let i = 0; i < 10; i++) {\n            this.infinteScrollNext(false);\n        }\n    }\n\n    infiniteScrollPrev(): void {\n        var newItem = \"\";\n        for (let i = 0; i < 50; i++) {\n            newItem += \"Test \" + this.infiniteScrollMin + \" \";\n        }\n\n        this.infiniteScrollMin--;\n        this.infiniteScrollItems.unshift(newItem);\n    }\n\n    infinteScrollNext(clean: boolean = true): void {\n        var newItem = \"\";\n        for (let i = 0; i < 50; i++) {\n            newItem += \"Test \" + this.infiniteScrollMax + \" \";\n        }\n\n        this.infiniteScrollMax++;\n        this.infiniteScrollItems.push(newItem);\n    }\n}\n</code>\n</pre>\n</tab>\n</tabset>\n\n<h3>Attributes</h3>\n<table-sortable\n    [columns]=\"attributesColumns\"\n    [data]=\"attributes\"\n    [sort]=\"attributesSort\">\n    Loading table...\n</table-sortable>\n\n<h3>Events</h3>\n<table-sortable\n    [columns]=\"eventsColumns\"\n    [data]=\"events\"\n    [sort]=\"eventsSort\">\n    Loading table...\n</table-sortable>\n\n</div>`,\n        directives: [INFINITE_SCROLLER_PROVIDERS, CodeHighlighter, TableSortable, TAB_PROVIDERS]\n})\nexport class InfiniteScrollerDemo {\n    infiniteScrollItems: string[] = [];\n    infiniteScrollMin: number = 0;\n    infiniteScrollMax: number = 1;\n\n    constructor() {\n        for (let i = 0; i < 10; i++) {\n            this.infinteScrollNext(false);\n        }\n    }\n\n    infiniteScrollPrev(): void {\n        var newItem = \"\";\n        for (let i = 0; i < 50; i++) {\n            newItem += \"Test \" + this.infiniteScrollMin + \" \";\n        }\n\n        this.infiniteScrollMin--;\n        this.infiniteScrollItems.unshift(newItem);\n    }\n\n    infinteScrollNext(clean: boolean = true): void {\n        var newItem = \"\";\n        for (let i = 0; i < 50; i++) {\n            newItem += \"Test \" + this.infiniteScrollMax + \" \";\n        }\n\n        this.infiniteScrollMax++;\n        this.infiniteScrollItems.push(newItem);\n    }\n    \n    attributes:Attribute[] = [\n        new Attribute('height', 'string', 'auto', \"Height of element. Examples: '300px', '10%', 'auto', etc.\"),\n        new Attribute('distance', 'number', '100', 'How far up and down the user can scroll for more scroll items'),\n        new Attribute('hideScrollbar', 'boolean', 'false', 'Hide the scrollbar of the InfiniteScroller')\n    ];\n    attributesColumns:TableSortableColumn[] = AttributeColumns;\n    attributesSort:TableSortableSorting = AttributesDefaultSort;\n    events:Event[] = [\n        new Event('next', 'null', 'When a scroll item is passed when scrolling down'),\n        new Event('prev', 'null', 'When a scroll item is passed when scrolling up'),\n    ];\n    eventsColumns:TableSortableColumn[] = EventColumns;\n    eventsSort:TableSortableSorting = EventsDefaultSort;\n}\n\nexport var INFINITESCROLLER_DEMO_PROVIDERS = [\n    InfiniteScrollerDemo\n];"],"sourceRoot":"/source/"}