{"version":3,"sources":["components/TextExpander/TextExpander.ts"],"names":[],"mappings":"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","file":"components/TextExpander/TextExpander.js","sourcesContent":["import {Component, ElementRef, Input, Output, EventEmitter} from '@angular/core';\nimport {CORE_DIRECTIVES, SlicePipe} from '@angular/common';\n\n@Component({\n    selector: 'text-expander',\n    template: \"\\n      <span *ngIf=\\\"text\\\">\\n          {{text | slice : 0 : (expanded ? text.length : amountOfCharacters())}}\\n          <span *ngIf=\\\"!expanded && text.length > amountOfCharacters()\\\">\\n              <span *ngIf=\\\"ellipsis\\\">&hellip;</span>\\n              <a href=\\\"javascript:void(8);\\\" (click)=\\\"toggleExpand()\\\">\\n                  {{expandText}}\\n              </a>\\n          </span>\\n          <span *ngIf=\\\"expanded && text.length > amountOfCharacters()\\\">\\n              <a href=\\\"javascript:void(8);\\\" (click)=\\\"toggleExpand()\\\">\\n                  {{shrinkText}}\\n              </a>\\n          </span>\\n      </span>\\n    \",\n    directives: [CORE_DIRECTIVES],\n    pipes: [SlicePipe]\n})\nexport class TextExpander {\n    @Input() expanded: boolean = false;\n    @Input() ellipsis: boolean = true;\n    @Input() text: string = null;\n    @Input() characters: number = 50;\n    @Input() words: number = 0;\n    @Input() expandText: string = \"show more\";\n    @Input() shrinkText: string = \"show less\";\n    @Output() expandedChange = new EventEmitter<any>()\n\n    toggleExpand(): void{\n        this.expanded = !this.expanded;\n        this.expandedChange.next(this.expanded);\n    }\n\n    amountOfCharacters(): number{\n        if(this.words > 0)\n            return this.getCharactersUpToNumberOfWords(this.words);\n            \n        return this.characters;\n    }\n\n    getCharactersUpToNumberOfWords(words: number): number{\n        //make copy of text to remove multiple spaces between words\n        let textCopy = this.text;\n        textCopy = textCopy.replace(/(^\\s*)|(\\s*$)/gi,\"\");\n        textCopy = textCopy.replace(/[ ]{2,}/gi,\" \");\n        textCopy = textCopy.replace(/\\n /,\"\\n\");\n\n        //get all words of new string\n        let wordsArr = textCopy.split(' ');\n\n        //show the entire text if requested words is higher or equal to actual\n        if(words >= wordsArr.length - 1) \n            return this.text.length;\n\n        //split array up to the number of words needed\n        wordsArr = wordsArr.splice(0, words);\n\n        //get the last word that will be showing\n        let lastWordToShow = wordsArr[wordsArr.length - 1];\n\n        //find the number of times that word is in the new array\n        let occurencesOfLastWord = wordsArr.filter((str) => {return str === lastWordToShow}).length;\n        \n        //word only shows once so get the location in original text and add the length of the word\n        if(occurencesOfLastWord == 1)\n            return this.text.split(lastWordToShow)[0].length + lastWordToShow.length;\n        \n        //loop over each occurence of the last word and sum up characters\n        let charactersUntilLastWord = 0;\n        for(let i = 0; i < occurencesOfLastWord; i++){\n            charactersUntilLastWord += this.text.split(lastWordToShow)[i].length;\n        }\n\n        return charactersUntilLastWord + lastWordToShow.length;\n    }\n}\n\nexport var TEXTEXPANDER_PROVIDERS = [\n    TextExpander\n];"],"sourceRoot":"/source/"}