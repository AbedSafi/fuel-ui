{"version":3,"sources":["pipes/OrderBy/OrderBy.ts"],"names":[],"mappings":"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","file":"pipes/OrderBy/OrderBy.js","sourcesContent":["/*\n * Example use\n *\t\tBasic Array of single type: *ngFor=\"let todo of todoService.todos | orderBy : '-'\"\n *\t\tMultidimensional Array Sort on single column: *ngFor=\"let todo of todoService.todos | orderBy : ['-status']\"\n *\t\tMultidimensional Array Sort on multiple columns: *ngFor=\"let todo of todoService.todos | orderBy : ['status', '-title']\"\n */\n\nimport {Pipe, PipeTransform} from '@angular/core';\n\n@Pipe({name: 'orderBy', pure: false})\nexport class OrderByPipe implements PipeTransform {\n\n\tvalue:string[] =[];\n\n\tstatic _orderByComparator(a:any, b:any):number{\n\n        if(a === null || typeof a === 'undefined') a = 0;\n        if(b === null || typeof b === 'undefined') b = 0;\n\n\t\tif((isNaN(parseFloat(a)) || !isFinite(a)) || (isNaN(parseFloat(b)) || !isFinite(b))){\n\t\t\t//Isn't a number so lowercase the string to properly compare\n\t\t\tif(a.toLowerCase() < b.toLowerCase()) return -1;\n\t\t\tif(a.toLowerCase() > b.toLowerCase()) return 1;\n\t\t}\n\t\telse{\n\t\t\t//Parse strings as numbers to compare properly\n\t\t\tif(parseFloat(a) < parseFloat(b)) return -1;\n\t\t\tif(parseFloat(a) > parseFloat(b)) return 1;\n\t\t}\n\n\t\treturn 0; //equal each other\n\t}\n\n    transform(input:any, config:string = '+'): any{\n\n    \t//make a copy of the input's reference\n    \tthis.value = [...input];\n    \tvar value = this.value;\n        \n        if(!Array.isArray(value)) return value;\n\n        if(!Array.isArray(config) || (Array.isArray(config) && config.length == 1)){\n            var propertyToCheck:string = !Array.isArray(config) ? config : config[0];\n            var desc = propertyToCheck.substr(0, 1) == '-';\n            \n            //Basic array\n            if(!propertyToCheck || propertyToCheck == '-' || propertyToCheck == '+'){\n                return !desc ? value.sort() : value.sort().reverse();\n            }\n            else {\n                var property:string = propertyToCheck.substr(0, 1) == '+' || propertyToCheck.substr(0, 1) == '-'\n                    ? propertyToCheck.substr(1)\n                    : propertyToCheck;\n\n                return value.sort(function(a:any,b:any){\n                    let aValue = a[property];\n                    let bValue = b[property];\n\n                    let propertySplit = property.split('.');\n\n                    if(typeof aValue === 'undefined' && typeof bValue === 'undefined' && propertySplit.length > 1){\n                        aValue = a;\n                        bValue = b;\n                        for(let j = 0; j < propertySplit.length; j++) {\n                            aValue = aValue[propertySplit[j]];\n                            bValue = bValue[propertySplit[j]];\n                        }\n                    }\n\n                    return !desc \n                        ? OrderByPipe._orderByComparator(aValue, bValue) \n                        : -OrderByPipe._orderByComparator(aValue, bValue);\n                });\n            }\n        }\n        else {\n            //Loop over property of the array in order and sort\n            return value.sort(function(a:any,b:any){\n                for(var i:number = 0; i < config.length; i++){\n                    var desc = config[i].substr(0, 1) == '-';\n                    var property = config[i].substr(0, 1) == '+' || config[i].substr(0, 1) == '-'\n                        ? config[i].substr(1)\n                        : config[i];\n\n                    let aValue = a[property];\n                    let bValue = b[property];\n\n                    let propertySplit = property.split('.');\n\n                    if(typeof aValue === 'undefined' && typeof bValue === 'undefined' && propertySplit.length > 1){\n                        aValue = a;\n                        bValue = b;\n                        for(let j = 0; j < propertySplit.length; j++) {\n                            aValue = aValue[propertySplit[j]];\n                            bValue = bValue[propertySplit[j]];\n                        }\n                    }\n\n                    var comparison = !desc \n                        ? OrderByPipe._orderByComparator(aValue, bValue) \n                        : -OrderByPipe._orderByComparator(aValue, bValue);\n\n                    //Don't return 0 yet in case of needing to sort by next property\n                    if(comparison != 0) return comparison;\n                }\n\n                return 0; //equal each other\n            });\n        }\n    }\n}\n\nexport var ORDERBY_PROVIDERS = [\n    OrderByPipe\n];"],"sourceRoot":"/source/"}