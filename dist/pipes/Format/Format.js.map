{"version":3,"sources":["pipes/Format/Format.ts"],"names":[],"mappings":"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","file":"pipes/Format/Format.js","sourcesContent":["import {Pipe, PipeTransform} from 'angular2/core';\nimport {DatePipe, DecimalPipe} from 'angular2/common';\nimport {StringHelper} from '../../utilities/StringUtils';\n\n@Pipe({\n  name: 'format'\n})\nexport class FormatPipe implements PipeTransform  {\n  \n  datePipe: DatePipe = new DatePipe();\n  decimalPipe: DecimalPipe = new DecimalPipe();\n  \n  constructor(){}\n  \n  transform(input:string, args:any): any {\n    var format = '';\n    var parsedFloat = 0;\n    var pipeArgs = args.split(':');\n    for(var i = 0; i < pipeArgs.length; i++){\n      pipeArgs[i] = pipeArgs[i].trim(' ');\n    }\n    \n    //Escape all html if not explicitly set\n    if(pipeArgs[0].toLowerCase() !== 'html')\n        input = StringHelper.escapeHtml(input);\n    \n    switch(pipeArgs[0].toLowerCase()) {\n      case 'text':\n        return input;\n      case 'decimal':\n      case 'number':\n        parsedFloat = !isNaN(parseFloat(input)) ? parseFloat(input) : 0;\n        format = pipeArgs.length > 1 ? pipeArgs[1] : null;\n        return this.decimalPipe.transform(parsedFloat, format);\n      case 'percentage':\n        parsedFloat = !isNaN(parseFloat(input)) ? parseFloat(input) : 0;\n        format = pipeArgs.length > 1 ? pipeArgs[1] : null;\n        return this.decimalPipe.transform(parsedFloat, format) + '%';\n      case 'date':\n      case 'datetime':\n        var date = !isNaN(parseInt(input)) ? parseInt(input) : new Date(input);\n        format = 'MMM d, y h:mm:ss a';\n        if(pipeArgs.length > 1)\n        {\n            format = '';\n            for(var i = 1; i < pipeArgs.length; i++){\n                format += pipeArgs[i];\n            }\n        }\n        return this.datePipe.transform(date, format);\n      default:\n        return input;\n    }\n  }\n}\n\nexport var FORMAT_PROVIDERS = [\n    FormatPipe\n];"],"sourceRoot":"/source/"}